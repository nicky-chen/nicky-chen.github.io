<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Classloader on 南乡清水的技术积累</title>
    <link>https://nicky-chin.cn/categories/classloader/</link>
    <description>Recent content in Classloader on 南乡清水的技术积累</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>All rights reserved - 2018</copyright>
    <lastBuildDate>Tue, 20 Mar 2018 11:18:15 +0800</lastBuildDate>
    
	<atom:link href="https://nicky-chin.cn/categories/classloader/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ClassLoader类加载分析（二）</title>
      <link>https://nicky-chin.cn/post-2/classloader-chapter02/</link>
      <pubDate>Tue, 20 Mar 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/post-2/classloader-chapter02/</guid>
      <description>一、JVM 提供的 Classloader 1.1 BootstrapClassloader 引导类加载器，又称启动类加载器，是最顶层的类加载器，主要用来加载Java核心类，如rt.jar、resources.jar、charsets.jar等，Sun的JVM中，执行java的命令中使用-Xbootclasspath选项或使用- D选项指定sun.boot.class.path系统属性值可以指定附加的类，它不是 java.lang.ClassLoader的子类，而是由JVM自身实现的该类c 语言实现，Java程序访问不到该加载器。通过下面代码可以查看该加载器加载了哪些jar包
public class MainClass { public static void main(String[] args) throws ClassNotFoundException { URL[] urls = sun.</description>
    </item>
    
    <item>
      <title>ClassLoader类加载分析（二）</title>
      <link>https://nicky-chin.cn/2018/03/20/classloader-chapter02/</link>
      <pubDate>Tue, 20 Mar 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/03/20/classloader-chapter02/</guid>
      <description>一、JVM 提供的 Classloader 1.1 BootstrapClassloader 引导类加载器，又称启动类加载器，是最顶层的类加载器，主要用来加载Java核心类，如rt.jar、resources.jar、charsets.jar等，Sun的JVM中，执行java的命令中使用-Xbootclasspath选项或使用- D选项指定sun.boot.class.path系统属性值可以指定附加的类，它不是 java.lang.ClassLoader的子类，而是由JVM自身实现的该类c 语言实现，Java程序访问不到该加载器。通过下面代码可以查看该加载器加载了哪些jar包
public class MainClass { public static void main(String[] args) throws ClassNotFoundException { URL[] urls = sun.</description>
    </item>
    
    <item>
      <title>ClassLoader类加载分析（一）</title>
      <link>https://nicky-chin.cn/post-2/classloader-chapter01/</link>
      <pubDate>Thu, 08 Mar 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/post-2/classloader-chapter01/</guid>
      <description>一、什么是Classloader 一个Java程序要想运行起来，首先需要经过编译生成 .class文件，然后创建一个运行环境（jvm）来加载字节码文件到内存运行，而.class 文件是怎样被加载中jvm 中的就是Java Classloader所做的事情。 那么.class文件什么时候会被类加载器加载到jvm中运行那？比如执行new操作时候，当我们使用Class.forName(“包路径+类名”)，Class.forName(“包路径+类名”,classloader),classloader.loadclass(“包路径+类名”);时候就触发了类加载器去类加载对应的路径去查找*.class,并创建Class对象。
类的加载过程 类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：
1、装载
2-4、链接 -包括 【验证、准备、解析】
5、初始化</description>
    </item>
    
    <item>
      <title>ClassLoader类加载分析（一）</title>
      <link>https://nicky-chin.cn/2018/03/08/classloader-chapter01/</link>
      <pubDate>Thu, 08 Mar 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/03/08/classloader-chapter01/</guid>
      <description>一、什么是Classloader 一个Java程序要想运行起来，首先需要经过编译生成 .class文件，然后创建一个运行环境（jvm）来加载字节码文件到内存运行，而.class 文件是怎样被加载中jvm 中的就是Java Classloader所做的事情。 那么.class文件什么时候会被类加载器加载到jvm中运行那？比如执行new操作时候，当我们使用Class.forName(“包路径+类名”)，Class.forName(“包路径+类名”,classloader),classloader.loadclass(“包路径+类名”);时候就触发了类加载器去类加载对应的路径去查找*.class,并创建Class对象。
类的加载过程 类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：
1、装载
2-4、链接 -包括 【验证、准备、解析】
5、初始化</description>
    </item>
    
  </channel>
</rss>