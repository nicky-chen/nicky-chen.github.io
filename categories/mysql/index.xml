<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on 南乡清水</title>
    <link>https://nicky-chen.github.io/categories/mysql/</link>
    <description>Recent content in Mysql on 南乡清水</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>All rights reserved - 2018</copyright>
    <lastBuildDate>Sat, 28 Apr 2018 11:18:15 +0800</lastBuildDate>
    
	<atom:link href="https://nicky-chen.github.io/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MYSQL高级特性之【Event事件】</title>
      <link>https://nicky-chen.github.io/2018/04/28/high-event/</link>
      <pubDate>Sat, 28 Apr 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chen.github.io/2018/04/28/high-event/</guid>
      <description>一、基本概念 mysql5.1版本开始引进event概念。event既“时间触发器”，与triggers的事件触发不同，event类似与linux crontab计划任务，用于时间触发。通过单独或调用存储过程使用，在某一特定的时间点，触发相关的SQL语句或存储过程。
二、适用范围 对于每隔一段时间就有固定需求的操作，如创建表，删除数据等操作，可以使用event来处理。
例如：使用event在每月的1日凌晨1点自动创建下个月需要使用的三张表。
每天清除数据表中的过期的记录。
三、使用权限 单独使用event调用SQL语句时，查看和创建需要用户具有event权限，调用该SQL语句时，需要用户具有执行该SQL的权限。Event权限的设置保存在mysql.user表和mysql.db表的Event_priv字段中。
当event和procedure（存储过程）配合使用的时候，查看和创建存储过程需要用户具有create routine权限，调用存储过程执行时需要使用excute权限，存储过程调用具体的SQL语句时，需要用户具有执行该SQL的权限。 查看EVENT命令有如下几种： &amp;gt;（1）查询mysql.event表； （2）通过SHOW EVENTS命令； （3）通过SHOW FULL EVENTS命令； （4）通过查询information_schema.events表 （5）SHOW CREATE EVENT。
总之，event的使用频率较低建议使用root用户进行创建和维护。
四、基本语法
4.1 开启定时器 要使event起作用，MySQL的常量GLOBAL event_scheduler必须为on或者是1 &amp;ndash; 查看是否开启定时器
SHOW VARIABLES LIKE &#39;event_scheduler&#39;;  &amp;ndash; 开启定时器 0：off 1：on
SET GLOBAL event_scheduler = 1;  当你设定事件计划为0 或OFF，即关闭事件计划进程的时候，不会有新的事件执行，但现有的正在运行的事件会执行到完毕
对于我们线上环境来说，使用event时，注意在主库上开启定时器，从库上关闭定时器，event触发所有操作均会记录binlog进行主从同步，从库上开启定时器很可能造成卡库。切换主库后之后记得将新主库上的定时器打开。
请特别注意！
4.2 创建事件 CREATE EVENT 的语法如下：
CREATE EVENT [IF NOT EXISTS] ---------------------------------------------*标注1 event_name -----------------------------------------------------*标注2 ON SCHEDULE schedule ------------------------------------*标注3 [ON COMPLETION [NOT] PRESERVE] -----------------*标注4 [ENABLE | DISABLE] ----------------------------------------*标注5 [COMMENT &#39;comment&#39;] --------------------------------------*标注6 DO sql_statement -----------------------------------------------*标注7  说明：</description>
    </item>
    
    <item>
      <title>MYSQL高级特性之【存储过程与函数】</title>
      <link>https://nicky-chen.github.io/2018/04/27/process-fun/</link>
      <pubDate>Fri, 27 Apr 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chen.github.io/2018/04/27/process-fun/</guid>
      <description>一、定义 存储程序可以分为存储过程和函数。
1.1 存储过程的定义 存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集。存储过程在数据库中经过第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。
1.2 函数的定义 存储函数（简称函数）在本质上与存储过程没有区别。
只是函数有如：只能返回一个变量的限制，而存储过程可以返回多个。函数是可以嵌入在SQL中使用，可以在select中调用，而存储过程不行。
二、创建存储过程和函数 存储过程和函数的创建过程很相似。
2.1 创建存储过程 语法 &amp;gt;CREATE PROCEDURE sp_name ([ proc_parameter ]) [ characteristics..] routine_body
proc_parameter指定存储过程的参数列表，列表形式如下：
 [IN|OUT|INOUT] param_name type
 其中in表示输入参数，out表示输出参数，inout表示既可以输入也可以输出；param_name表示参数名称；type表示参数的类型
该类型可以是MYSQL数据库中的任意类型
有以下取值：
characteristic: LANGUAGE SQL | [NOT] DETERMINISTIC | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA } | SQL SECURITY { DEFINER | INVOKER } | COMMENT &#39;string&#39; routine_body: Valid SQL procedure statement or statements  LANGUAGE SQL ：说明routine_body部分是由SQL语句组成的，当前系统支持的语言为SQL，SQL是LANGUAGE特性的唯一值</description>
    </item>
    
  </channel>
</rss>