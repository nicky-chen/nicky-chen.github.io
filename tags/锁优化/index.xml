<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>锁优化 on 南乡清水</title>
    <link>http://nicky-chin.cn/tags/%E9%94%81%E4%BC%98%E5%8C%96/</link>
    <description>Recent content in 锁优化 on 南乡清水</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>All rights reserved - 2018</copyright>
    <lastBuildDate>Mon, 14 May 2018 11:18:15 +0800</lastBuildDate>
    
	<atom:link href="http://nicky-chin.cn/tags/%E9%94%81%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>synchronized实现原理及锁优化</title>
      <link>http://nicky-chin.cn/2018/05/14/synchronized-principle/</link>
      <pubDate>Mon, 14 May 2018 11:18:15 +0800</pubDate>
      
      <guid>http://nicky-chin.cn/2018/05/14/synchronized-principle/</guid>
      <description>1.引言 并发编程中synchronized是重量级锁，但随着JVM1.6对synchronized进行优化后，有些情况下它并不那么重，本文介绍了Java SE1.6中为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁，以及锁的存储结构和升级过程。
2.术语定义 CAS(Compare and Swap): 比较并交换。用于在硬件层面上提供原子性操作。在 Intel 处理器中，比较并交换通过指令cmpxchg实现。比较是否和给定的数值一致，如果一致则修改，不一致则不修改。
3.同步的基础 Java中的每一个对象都可以作为锁。 对于同步方法，锁是当前实例对象。 对于静态同步方法，锁是当前对象的Class对象。 对于同步方法块，锁是synchonized括号里配置的对象。
我们通过java代码和字节码分析下 java代码如下：
public class SyncTest { private static double a = 1; public synchronized void plusNumber() { a++; } public void minusNumber() { System.out.println(a); synchronized (this) { a--; } } public synchronized static void divide() { a = a / 0.1; } }  解析成字节码指令:
//同步方法 public synchronized void plusNumber(); descriptor: ()V flags: ACC_PUBLIC, ACC_SYNCHRONIZED Code: stack=4, locals=1, args_size=1 0: getstatic #2 // Field a:D 3: dconst_1 4: dadd 5: putstatic #2 // Field a:D 8: return LineNumberTable: line 12: 0 line 13: 8 //同步块 public void minusNumber(); descriptor: ()V flags: ACC_PUBLIC Code: stack=4, locals=3, args_size=1 0: getstatic #3 // Field java/lang/System.</description>
    </item>
    
    <item>
      <title>volatile关键字原理实现及应用</title>
      <link>http://nicky-chin.cn/2018/05/04/volatile-feature/</link>
      <pubDate>Fri, 04 May 2018 11:18:15 +0800</pubDate>
      
      <guid>http://nicky-chin.cn/2018/05/04/volatile-feature/</guid>
      <description>1.并发编程中的三个概念 在并发编程中, 需要了解线程的三个概念：原子性，可见性，有序性：
1.1.原子性
 原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。
 一个很经典的例子就是银行账户转账问题：
比如从账户A向账户B转1000元，那么必然包括2个操作：从账户A减去1000元，往账户B加上1000元。 试想一下，如果这2个操作不具备原子性，会造成什么样的后果。假如从账户A减去1000元之后，操作突然中止。然后又从B取出了500元，取出500元之后， 再执行 往账户B加上1000元 的操作。这样就会导致账户A虽然减去了1000元，但是账户B没有收到这个转过来的1000元。 所以这2个操作必须要具备原子性才能保证不出现一些意外的问题。  　同样地反映到并发编程中会出现什么结果呢？
　举个最简单的例子，大家想一下假如为一个32位的变量赋值过程不具备原子性的话，会发生什么后果？
i = 9;  假若一个线程执行到这个语句时，我暂且假设为一个32位的变量赋值包括两个过程：为低16位赋值，为高16位赋值。 那么就可能发生一种情况：当将低16位数值写入之后，突然被中断，而此时又有一个线程去读取i的值，那么读取到的就是错误的数据。
1.2.可见性
 可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。
 举个简单的例子，看下面这段代码：
//线程1执行的代码 int i = 0; i = 10; //线程2执行的代码 j = i;  　假若执行线程1的是CPU1，执行线程2的是CPU2。由上面的分析可知，当线程1执行 i =10这句时，会先把i的初始值加载到CPU1的高速缓存中，然后赋值为10，那么在CPU1的高速缓存当中i的值变为10了，却没有立即写入到主存当中。
　此时线程2执行 j = i，它会先去主存读取i的值并加载到CPU2的缓存当中，注意此时内存当中i的值还是0，那么就会使得j的值为0，而不是10. 这就是可见性问题，线程1对变量i修改了之后，线程2没有立即看到线程1修改的值。
1.3.有序性
 有序性：即程序执行的顺序按照代码的逻辑顺序执行
 举个简单的例子，看下面这段代码：
int i = 0; boolean flag = false; i = 1; //语句1 flag = true; //语句2  　上面代码定义了一个int型变量，定义了一个boolean类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句1是在语句2前面的，那么JVM在真正执行这段代码的时候会保证语句1一定会在语句2前面执行吗？不一定，为什么呢？这里可能会发生指令重排序。 但是要注意，虽然处理器会对指令进行重排序，但是它会保证程序最终结果会和代码顺序执行结果相同，那么它靠什么保证的呢？再看下面一个例子：</description>
    </item>
    
  </channel>
</rss>