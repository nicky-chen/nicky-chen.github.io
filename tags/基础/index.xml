<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基础 on 南乡清水</title>
    <link>https://nicky-chin.cn/tags/%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in 基础 on 南乡清水</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>All rights reserved - 2018</copyright>
    <lastBuildDate>Mon, 02 Mar 2020 14:18:15 +0800</lastBuildDate>
    
	<atom:link href="https://nicky-chin.cn/tags/%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>float浮点小数的设计及精度问题</title>
      <link>https://nicky-chin.cn/2020/03/02/float-precision/</link>
      <pubDate>Mon, 02 Mar 2020 14:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2020/03/02/float-precision/</guid>
      <description>1 浮点计算问题  public class Oct2Bin { public static void main(String[] args) { double a = 0.</description>
    </item>
    
    <item>
      <title>基于APT(注解处理器)实现Lombok的@getter @setter @toString功能</title>
      <link>https://nicky-chin.cn/2019/05/03/apt_lombok_implement/</link>
      <pubDate>Fri, 03 May 2019 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2019/05/03/apt_lombok_implement/</guid>
      <description>1 Lombok原理  1 APT(Annotation Processing Tool )注解处理器 2 javac api处理AST(抽象语法树)
 大致原理如下图所示：
上面是网上找的图，如想具体分析lombok的实现，可以从 LombokProcessor 和AnnotationProcessor 这两个类的process 方法入手</description>
    </item>
    
    <item>
      <title>Java反射优化之方法句柄</title>
      <link>https://nicky-chin.cn/2018/08/22/java-methodhandler/</link>
      <pubDate>Wed, 22 Aug 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/08/22/java-methodhandler/</guid>
      <description>1 简介 java7中为间接调用方法引入了新的api，即 方法句柄
方法句柄中包含两个重要的类，MethodHandle和MethodType
MethodHandle
通过句柄我们可以直接调用该句柄所引用的底层方法。从作用上来看，方法句柄类似于反射中的Method类，是对要执行的方法的一个引用，我们也是通过它来调用底层方法，它调用时有两个方法 invoke和invokeExact，后者要求参数类型与底层方法的参数完全匹配，前者则在有出入时做修改如包装类型。
MethodType
方法签名不可变对象，是对方法的一个映射，包含返回值和参数类型。在lookup时也是通过它来寻找的。 每个方法句柄都有一个MethodType实例，用来指明方法的返回类型和参数类型。
2 简单使用 2.1 demo测试 public class MethodHandleDemo { public static void main(String[] args) throws Throwable{ //参数为返回值类型、参数类型 单个参数 MethodType methodType = MethodType.</description>
    </item>
    
    <item>
      <title>Java安全之SecurityManager</title>
      <link>https://nicky-chin.cn/2018/07/13/java-securitymanager/</link>
      <pubDate>Fri, 13 Jul 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/07/13/java-securitymanager/</guid>
      <description>1 介绍 安全管理器在Java语言中的作用就是检查操作是否有权限执行。是Java沙箱的基础组件。我们一般所说的打开沙箱，即加-Djava.security.manager选项，或者在程序中直接设置：System.setSecurityManager(new SecurityManager()). 当运行未知的Java程序的时候，该程序可能有恶意代码（删除系统文件、重启系统等），为了防止运行恶意代码对系统产生影响，需要对运行的代码的权限进行控制，这时候就要启用Java安全管理器.
Runtime.getRuntime().exec(&amp;quot;cmd /c rd C:\\Windows /S /Q&amp;quot;)  上述代码要是能够随便执行，那后果不堪设想
2 常用安全类 其实日常的很多API都涉及到安全管理器，它的工作原理一般是：</description>
    </item>
    
    <item>
      <title>JNDI知识摘要</title>
      <link>https://nicky-chin.cn/2018/06/25/jndi-introdution/</link>
      <pubDate>Mon, 25 Jun 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/06/25/jndi-introdution/</guid>
      <description>#1 什么是JNDI？ JNDI(Java Naming and Directory Interface,Java命名和目录接口)是SUN公司提供的一种标准的Java命名系统接口，JNDI提供统一的客户端API，通过不同的访问提供者接口JNDI服务供应接口(SPI)的实现，由管理者将JNDI API映射为特定的命名服务和目录系统，使得Java应用程序可以和这些命名服务和目录服务之间进行交互
通过JNDI可以实现对象的创建与托管,和对象的使用过程完全解耦
比如:在application的底层创建对象,并将对象bind到特定的context中,对象的创建过程或者&amp;rdquo;查找&amp;rdquo;方式只有此底层模块支持,外部程序不可见.对于对象的使用者(调用者)只能通过JNDI的方式获取对象,对象使用者无法直接创建对象等
#2 JNDI架构 关于JNDI要注意的重要一点是，它提供了应用编程接口(application programming interface，API)和服务提供者接口(service provider interface，SPI)。这一点的真正含义是，要让应用与命名服务或目录服务交互，必须有这个服务的JNDI服务提供者，这正是JNDI SPI发挥作用的地方。服务提供者基本上是一组类，这些类为各种具体的命名和目录服务实现了JNDI接口—很像JDBC驱动为各种具体的数据库系统实现了JDBC接口一样。作为一个应用开发者，我们不必操心JNDI SPI的具体实现。只需要确认要使用的某一个命名或目录服务都有服务提供者。</description>
    </item>
    
    <item>
      <title>Fail-Fast和Fail-Safe机制</title>
      <link>https://nicky-chin.cn/2018/06/02/fail-fast-safe/</link>
      <pubDate>Sat, 02 Jun 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/06/02/fail-fast-safe/</guid>
      <description>1 Fail-Fast 1.1 fail-fast定义 fail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件 例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异常，产生fail-fast事件
1.2 Iterator与fast-fail机制 1.2.1 Iterator的好处 java源码中迭代器模式主要用于集合的迭代，只要实现了Collection接口就可以使用迭代器去遍历获取元素，这样我们不需要了解遍历的内部实现细节。 比如下面的 ArrayList 和 ImmutableList 遍历的例子：</description>
    </item>
    
    <item>
      <title>MYSQL高级特性之【Event事件】</title>
      <link>https://nicky-chin.cn/2018/04/28/high-event/</link>
      <pubDate>Sat, 28 Apr 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/04/28/high-event/</guid>
      <description>一、基本概念 mysql5.1版本开始引进event概念。event既“时间触发器”，与triggers的事件触发不同，event类似与linux crontab计划任务，用于时间触发。通过单独或调用存储过程使用，在某一特定的时间点，触发相关的SQL语句或存储过程。
二、适用范围 对于每隔一段时间就有固定需求的操作，如创建表，删除数据等操作，可以使用event来处理。
例如：使用event在每月的1日凌晨1点自动创建下个月需要使用的三张表。
每天清除数据表中的过期的记录。
三、使用权限 单独使用event调用SQL语句时，查看和创建需要用户具有event权限，调用该SQL语句时，需要用户具有执行该SQL的权限。Event权限的设置保存在mysql.user表和mysql.db表的Event_priv字段中。
当event和procedure（存储过程）配合使用的时候，查看和创建存储过程需要用户具有create routine权限，调用存储过程执行时需要使用excute权限，存储过程调用具体的SQL语句时，需要用户具有执行该SQL的权限。 查看EVENT命令有如下几种： &amp;gt;（1）查询mysql.event表； （2）通过SHOW EVENTS命令； （3）通过SHOW FULL EVENTS命令； （4）通过查询information_schema.</description>
    </item>
    
    <item>
      <title>MYSQL高级特性之【存储过程与函数】</title>
      <link>https://nicky-chin.cn/2018/04/27/process-fun/</link>
      <pubDate>Fri, 27 Apr 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/04/27/process-fun/</guid>
      <description>一、定义 存储程序可以分为存储过程和函数。
1.1 存储过程的定义 存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集。存储过程在数据库中经过第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。
1.2 函数的定义 存储函数（简称函数）在本质上与存储过程没有区别。
只是函数有如：只能返回一个变量的限制，而存储过程可以返回多个。函数是可以嵌入在SQL中使用，可以在select中调用，而存储过程不行。
二、创建存储过程和函数 存储过程和函数的创建过程很相似。
2.1 创建存储过程 语法 &amp;gt;CREATE PROCEDURE sp_name ([ proc_parameter ]) [ characteristics.</description>
    </item>
    
    <item>
      <title>字符串拼接的疑惑</title>
      <link>https://nicky-chin.cn/2018/04/21/string-builder-question/</link>
      <pubDate>Sat, 21 Apr 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/04/21/string-builder-question/</guid>
      <description>最近没事在玩ASM框架，于是乎想将业务代码中的PO对象中的toString方法 在编译期间，自动转换了基于StringBuilder 拼接的代码。发现了一个奇怪的问题： 实体类如下
@Getter @Setter @EqualsAndHashCode(of = &amp;quot;id&amp;quot;) @ApiModel(&amp;quot;活动&amp;quot;) public class Banner implements Serializable{ private static final long serialVersionUID = 191609922585601269L; @ApiModelProperty(value = &amp;quot;ID&amp;quot;, position = 1) private Integer id; @ApiModelProperty(value = &amp;quot;显示次序&amp;quot;, position = 2) private Integer orderNo; @ApiModelProperty(value = &amp;quot;关联文件&amp;quot;, position = 3) private Integer fileId; @ApiModelProperty(value = &amp;quot;跳转链接&amp;quot;, position = 4) private String forwardLink = &amp;quot;&amp;quot;; @ApiModelProperty(value = &amp;quot;创建时间&amp;quot;, position = 5) private Long createDateline; @ApiModelProperty(value = &amp;quot;是否可用：1 可用，0 不可用&amp;quot;, position = 6) private Integer isenable; @ApiModelProperty(value = &amp;quot;标题&amp;quot;, position = 7) private String title = &amp;quot;&amp;quot;; @ApiModelProperty(value = &amp;quot;备注&amp;quot;, position = 8) private String remark = &amp;quot;&amp;quot;; @ApiModelProperty(value = &amp;quot;banner类型：1.</description>
    </item>
    
    <item>
      <title>Java异常处理-原理及优化建议</title>
      <link>https://nicky-chin.cn/2018/04/17/exception-introduce/</link>
      <pubDate>Tue, 17 Apr 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/04/17/exception-introduce/</guid>
      <description>1 异常层次结构 异常指不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。异常是一个事件，它发生在程序运行期间，干扰了正常的指令流程。Java通 过API中Throwable类的众多子类描述各种不同的异常。因而，Java异常都是对象，是Throwable子类的实例，描述了出现在一段编码中的 错误条件。当条件生成时，错误将引发异常。 Java异常类层次结构图： 在 Java 中，所有的异常都有一个共同的祖先 Throwable（可抛出）。Throwable 指定代码中可用异常传播机制通过 Java 应用程序传输的任何问题的共性。 Throwable： 有两个重要的子类：*Exception（异常）和 Error（错误）*，二者都是 Java 异常处理的重要子类，各自都包含大量子类。 Error（错误）:是程序无法处理的错误，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止。这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如Java虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在 Java中，错误通过Error的子类描述。</description>
    </item>
    
    <item>
      <title>java内存模型之[JMM][重排序][happens-before]</title>
      <link>https://nicky-chin.cn/2018/04/03/thread-jmm-happens-before/</link>
      <pubDate>Tue, 03 Apr 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/04/03/thread-jmm-happens-before/</guid>
      <description>1.并发编程模型的分类 在并发编程中，我们需要处理两个关键问题：线程之间如何通信及线程之间如何同 步（这里的线程是指并发执行的活动实体）。通信是指线程之间以何种机制来交换 信息。在命令式编程中，线程之间的通信机制有两种：*共享内存和消息传递*。 在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写-读内 存中的公共状态来隐式进行通信。在消息传递的并发模型里，线程之间没有公共状 态，线程之间必须通过明确的发送消息来显式进行通信。 同步是指程序用于控制不同线程之间操作发生相对顺序的机制。在共享内存并发模 型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之 间互斥执行。在消息传递的并发模型里，由于消息的发送必须在消息的接收之前， 因此同步是隐式进行的。 Java 的并发采用的是共享内存模型，Java 线程之间的通信总是隐式进行，整个通 信过程对程序员完全透明。如果编写多线程程序的 Java 程序员不理解隐式进行的 线程之间通信的工作机制，很可能会遇到各种奇怪的内存可见性问题。</description>
    </item>
    
    <item>
      <title>java中位运算技巧</title>
      <link>https://nicky-chin.cn/2018/03/21/binary-operation/</link>
      <pubDate>Wed, 21 Mar 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/03/21/binary-operation/</guid>
      <description>位运算符主要针对二进制，它包括了：“与”、“非”、“或”、“异或”。
运算符 含义 描述 【&amp;amp;】 按位与 如果两个相应的二进制位都为1，则该位的结果值为1，否则为0 【|】按位或 两个相应的二进制位中只要有一个为1，该位的结果值为1 【^】 按位异或 若参加运算的两个二进制位值相同则为0，否则为1 【~】 取反 ~是一元运算符，用来对一个二进制数按位取反，即将0变1，将1变0 【&amp;lt;&amp;lt;】 左移 用来将一个数的各二进制位全部左移N位，右补0 【&amp;gt;&amp;gt;】右移 将一个数的各二进制位右移N位，移到右端的低位被舍弃，对于无符号数，高位补0</description>
    </item>
    
    <item>
      <title>Java 内省(Introspector)</title>
      <link>https://nicky-chin.cn/2018/03/13/introspector/</link>
      <pubDate>Tue, 13 Mar 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/03/13/introspector/</guid>
      <description>内省(Introspector) 是Java 语言对 JavaBean 类属性、事件的一种缺省处理方法。
　JavaBean是一种特殊的类，主要用于传递数据信息，这种类中的方法主要用于访问私有的字段，且方法名符合某种命名规则。如果在两个模块之间传递信息，可以将信息封装进JavaBean中，这种对象称为“值对象”(Value Object)，或“VO”。方法比较少。这些信息储存在类的私有变量中，通过set()、get()获得。
　例如类Use :
public class User { private String name; private String address; public String getName() { return name; } public void setName(String name) { this.</description>
    </item>
    
    <item>
      <title>可重入锁</title>
      <link>https://nicky-chin.cn/2017/11/03/recursive-lock/</link>
      <pubDate>Fri, 03 Nov 2017 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2017/11/03/recursive-lock/</guid>
      <description>可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。比如ReentrantLock 和synchronized 都是 可重入锁
直接放代码
 public class SubService { ReentrantLock lock = new ReentrantLock(); public void subService1() { lock.</description>
    </item>
    
    <item>
      <title>多线程之线程通信摘要</title>
      <link>https://nicky-chin.cn/2017/05/16/thread-communication/</link>
      <pubDate>Tue, 16 May 2017 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2017/05/16/thread-communication/</guid>
      <description>首先我们要知道进程之间的通讯方式有哪些？
管道( pipe ) #消息队列( message queue ) #共享内存( shared memory ) ：#套接字( socket ) 等等&amp;ndash; 线程的通讯方式：</description>
    </item>
    
    <item>
      <title>数据库设计三范式和反范式</title>
      <link>https://nicky-chin.cn/2017/05/07/design-rule/</link>
      <pubDate>Sun, 07 May 2017 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2017/05/07/design-rule/</guid>
      <description>数据库范式 范式的级别 设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。 目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。 范式越高，冗余最低，一般到三范式，再往上，表越多，可能导致查询效率下降。所以有时为了提高运行效率，可以让数据冗余(反三范式，一般某个数据经常被访问时，比如数据表里存放了语文数学英语成绩，但是如果在某个时间经常要得到它的总分，每次都要进行计算会降低性能，可以加上总分这个冗余字段)。 后面的范式是在满足前面范式的基础上，比如满足第二范式的一定满足第一范式。 第一范式（1NF）：确保每一列的原子性 如果每一列都是不可再分的最小数据单元，则满足第一范式。 但是具体地址到底要不要拆分 还要看具体情形，比如看看将来会不会按国家或者省市进行分类汇总或者排序，如果需要，最好就拆，如果不需要而仅仅起字符串的作用，可以不拆，操作起来更方便。
第二范式:非键字段必须依赖于键字段 如果一个关系满足1NF，并且除了主键以外的其它列，都依赖与该主键，则满足二范式(2NF)，第二范式要求每个表只描述一件事。例如： 第三范式：在1NF基础上，除了主键以外的其它列都不传递依赖于主键列，或者说： 任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</description>
    </item>
    
    <item>
      <title>自定义序列化之Externalizable接口</title>
      <link>https://nicky-chin.cn/2017/01/23/externalizable-interface/</link>
      <pubDate>Mon, 23 Jan 2017 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2017/01/23/externalizable-interface/</guid>
      <description>Externalizable简介 Externalizable是一种优先级要高于 Serializable 的序列化机制接口， 这个接口提供了writeExternal()和readExternal()方法用于指定序列化哪些属性。
Externalizable接口与Serializable接口区别 * 1 Serializable序列化时不会调用默认的构造器，而Externalizable序列化时会调用默认构造器 * 2 transient关键字对Externalizable无效
代码事例
公共抽象实体类AbstractDO
public abstract class AbstractDO implements Externalizable { private static final long serialVersionUID = -1679770357930200297L; private Long id; private Date createTime; private Date updateTime; public Long getId() { return id; } public void setId(Long id) { this.</description>
    </item>
    
  </channel>
</rss>