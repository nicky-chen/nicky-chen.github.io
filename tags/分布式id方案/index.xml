<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式ID方案 on 南乡清水的技术积累</title>
    <link>https://nicky-chin.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8Fid%E6%96%B9%E6%A1%88/</link>
    <description>Recent content in 分布式ID方案 on 南乡清水的技术积累</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>All rights reserved - 2018</copyright>
    <lastBuildDate>Mon, 15 Oct 2018 11:18:15 +0800</lastBuildDate>
    
	<atom:link href="https://nicky-chin.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8Fid%E6%96%B9%E6%A1%88/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>分布式全局序列ID方案之Redis优化方案</title>
      <link>https://nicky-chin.cn/post-2/id-redis/</link>
      <pubDate>Mon, 15 Oct 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/post-2/id-redis/</guid>
      <description>1 Redis的Flicker方案 利用redis的lua脚本功能，在每个节点上通过lua脚本生成唯一ID，生成的ID为64位，具体如下：
使用41 bit来存放时间，精确到毫秒，可以使用到2039年 使用12 bit来存放逻辑分片ID，最大分片ID是4095 使用10 bit来存放自增长ID，则每个节点，每毫秒最多可生成1024个ID 比如GTM时间 2018年6月24日11点23分 ，它的距1970年的毫秒数是 1529810591000，假定分片ID是60，自增长序列是20，则生成的ID是：
6416490681073670164 = 1529810591000 &amp;lt;&amp;lt; 22 | 60 &amp;lt;&amp;lt; 10 | 20 redis提供了TIME命令，取得redis服务器的秒值和微秒值 毫秒值获取命令：EVAL &amp;quot;local current = redis.</description>
    </item>
    
    <item>
      <title>分布式全局序列ID方案之Redis优化方案</title>
      <link>https://nicky-chin.cn/2018/10/15/id-redis/</link>
      <pubDate>Mon, 15 Oct 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/10/15/id-redis/</guid>
      <description>1 Redis的Flicker方案 利用redis的lua脚本功能，在每个节点上通过lua脚本生成唯一ID，生成的ID为64位，具体如下：
使用41 bit来存放时间，精确到毫秒，可以使用到2039年 使用12 bit来存放逻辑分片ID，最大分片ID是4095 使用10 bit来存放自增长ID，则每个节点，每毫秒最多可生成1024个ID 比如GTM时间 2018年6月24日11点23分 ，它的距1970年的毫秒数是 1529810591000，假定分片ID是60，自增长序列是20，则生成的ID是：
6416490681073670164 = 1529810591000 &amp;lt;&amp;lt; 22 | 60 &amp;lt;&amp;lt; 10 | 20 redis提供了TIME命令，取得redis服务器的秒值和微秒值 毫秒值获取命令：EVAL &amp;quot;local current = redis.</description>
    </item>
    
    <item>
      <title>分布式全局序列ID方案之Flicker优化方案</title>
      <link>https://nicky-chin.cn/post-2/id-flicker/</link>
      <pubDate>Tue, 25 Sep 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/post-2/id-flicker/</guid>
      <description>1 Flicker的解决方案 MySQL中id自增的特性，可以借此来生成全局的序列号，Flicker在解决全局ID生成方案里就采用了MySQL自增长ID的机制（auto_increment + replace into + MyISAM）。一个生成64位ID方案具体就是这样的： 先创建单独的数据库，然后创建一个表：
CREATE TABLE borrow_order ( id bigint(20) unsigned NOT NULL auto_increment, stub char(1) NOT NULL default &#39;&#39;, PRIMARY KEY (id), UNIQUE KEY stub (stub) ) ENGINE=MyISAM  当我们插入记录后，执行SELECT * from borrow_order ，查询结果就是这样的：</description>
    </item>
    
    <item>
      <title>分布式全局序列ID方案之Flicker优化方案</title>
      <link>https://nicky-chin.cn/2018/09/25/id-flicker/</link>
      <pubDate>Tue, 25 Sep 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/09/25/id-flicker/</guid>
      <description>1 Flicker的解决方案 MySQL中id自增的特性，可以借此来生成全局的序列号，Flicker在解决全局ID生成方案里就采用了MySQL自增长ID的机制（auto_increment + replace into + MyISAM）。一个生成64位ID方案具体就是这样的： 先创建单独的数据库，然后创建一个表：
CREATE TABLE borrow_order ( id bigint(20) unsigned NOT NULL auto_increment, stub char(1) NOT NULL default &#39;&#39;, PRIMARY KEY (id), UNIQUE KEY stub (stub) ) ENGINE=MyISAM  当我们插入记录后，执行SELECT * from borrow_order ，查询结果就是这样的：</description>
    </item>
    
    <item>
      <title>分布式全局序列ID方案之Snowflake算法</title>
      <link>https://nicky-chin.cn/post-2/id-snowflake/</link>
      <pubDate>Wed, 19 Sep 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/post-2/id-snowflake/</guid>
      <description>1 背景 在分布式项目中，在业务数据中需要生成一个全局唯一的序列号，比如：消息标识，订单标识，用户标识等等。同时对于id生成的要求如下： * 全局唯一 * 趋势有序 * 主键索引 方便排序 * 高可用 * 高并发</description>
    </item>
    
    <item>
      <title>分布式全局序列ID方案之Snowflake算法</title>
      <link>https://nicky-chin.cn/2018/09/19/id-snowflake/</link>
      <pubDate>Wed, 19 Sep 2018 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2018/09/19/id-snowflake/</guid>
      <description>1 背景 在分布式项目中，在业务数据中需要生成一个全局唯一的序列号，比如：消息标识，订单标识，用户标识等等。同时对于id生成的要求如下： * 全局唯一 * 趋势有序 * 主键索引 方便排序 * 高可用 * 高并发</description>
    </item>
    
  </channel>
</rss>