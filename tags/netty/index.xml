<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>netty on 南乡清水的技术积累</title>
    <link>https://nicky-chin.cn/tags/netty/</link>
    <description>Recent content in netty on 南乡清水的技术积累</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>All rights reserved - 2018</copyright>
    <lastBuildDate>Thu, 11 Jun 2020 12:39:09 +0800</lastBuildDate>
    
	<atom:link href="https://nicky-chin.cn/tags/netty/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>浅析java-nio及netty的reactor模型</title>
      <link>https://nicky-chin.cn/post-2/net-nio-netty/</link>
      <pubDate>Thu, 11 Jun 2020 12:39:09 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/post-2/net-nio-netty/</guid>
      <description>1 服务端处理网络请求 首先看看服务端处理网络请求的典型过程：
由上图可以看到，主要处理步骤包括：
获取请求数据，客户端与服务器建立连接发出请求，服务器接受请求（1-3）。
构建响应，当服务器接收完请求，并在用户空间处理客户端的请求，直到构建响应完成（4）。
返回数据，服务器将已构建好的响应再通过内核空间的网络 I/O 发还给客户端（5-7）。
设计服务端并发模型时，主要有如下两个关键点：
服务器如何管理连接，获取输入数据。
服务器如何处理请求。
2 Reactor 模式 2.</description>
    </item>
    
    <item>
      <title>浅析java-nio及netty的reactor模型</title>
      <link>https://nicky-chin.cn/2020/06/11/net-nio-netty/</link>
      <pubDate>Thu, 11 Jun 2020 12:39:09 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2020/06/11/net-nio-netty/</guid>
      <description>1 服务端处理网络请求 首先看看服务端处理网络请求的典型过程：
由上图可以看到，主要处理步骤包括：
获取请求数据，客户端与服务器建立连接发出请求，服务器接受请求（1-3）。
构建响应，当服务器接收完请求，并在用户空间处理客户端的请求，直到构建响应完成（4）。
返回数据，服务器将已构建好的响应再通过内核空间的网络 I/O 发还给客户端（5-7）。
设计服务端并发模型时，主要有如下两个关键点：
服务器如何管理连接，获取输入数据。
服务器如何处理请求。
2 Reactor 模式 2.</description>
    </item>
    
  </channel>
</rss>