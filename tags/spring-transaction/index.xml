<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Transaction on 南乡清水</title>
    <link>https://nicky-chin.cn/tags/spring-transaction/</link>
    <description>Recent content in Spring Transaction on 南乡清水</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>All rights reserved - 2018</copyright>
    <lastBuildDate>Tue, 19 May 2020 13:39:15 +0800</lastBuildDate>
    
	<atom:link href="https://nicky-chin.cn/tags/spring-transaction/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Transaction源码解析之事务提交与回滚</title>
      <link>https://nicky-chin.cn/2020/05/19/spring-transaction-commit/</link>
      <pubDate>Tue, 19 May 2020 13:39:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2020/05/19/spring-transaction-commit/</guid>
      <description>1 事务还原 1.1 调试demo 我们使用常用的业务代码来做调试：
@Service(&amp;quot;personService&amp;quot;) public class PersonServiceImpl implements IPersonService { @Override @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, rollbackFor = Exception.class) public void removeUserById(Integer id) { personRepository.removeById(id); User user = new User(); user.setId(0); user.setName(&amp;quot;aaa&amp;quot;); user.setSumScore(&amp;quot;222&amp;quot;); user.setAvgScore(&amp;quot;111&amp;quot;); user.setAge(20); user.setIsSuccess(false); user.setScore(UnsignedInteger.valueOf(1)); user.setStatus(UnsignedLong.valueOf(2)); userService.insertOne(user); } } @Repository public interface PersonRepository extends JpaRepository&amp;lt;Person, Integer&amp;gt;, JpaSpecificationExecutor { Person findByName(String name); @Query(&amp;quot;select p from Person p where p.id = ?1&amp;quot;) Person findObjectById(Integer id); //@CacheEvict(value = &amp;quot;person&amp;quot;) @Transactional(propagation = Propagation.</description>
    </item>
    
    <item>
      <title>Transaction源码解析之事务预处理</title>
      <link>https://nicky-chin.cn/2020/05/11/spring-transaction-prepare/</link>
      <pubDate>Mon, 11 May 2020 12:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2020/05/11/spring-transaction-prepare/</guid>
      <description>1 调试源码 接上篇Transaction源码解析之事务的配置解析
我们调用相应的service类,来调试具体的事务处理流程，测试代码如下:
public void testInvokeTransactional() throws Exception { TransactionalTestBean testBean = getTestBean(); CallCountingTransactionManager ptm = (CallCountingTransactionManager) context.getBean(&amp;quot;transactionManager&amp;quot;); // try with transactional assertEquals(&amp;quot;Should not have any started transactions&amp;quot;, 0, ptm.begun); testBean.findAllFoos(); assertEquals(&amp;quot;Should have 1 started transaction&amp;quot;, 1, ptm.begun); assertEquals(&amp;quot;Should have 1 committed transaction&amp;quot;, 1, ptm.commits); // try with non-transaction testBean.doSomething(); assertEquals(&amp;quot;Should not have started another transaction&amp;quot;, 1, ptm.begun); // try with exceptional try { testBean.exceptional(new IllegalArgumentException(&amp;quot;foo&amp;quot;)); fail(&amp;quot;Should NEVER get here&amp;quot;); } catch (Throwable throwable) { assertEquals(&amp;quot;Should have another started transaction&amp;quot;, 2, ptm.</description>
    </item>
    
    <item>
      <title>Transaction源码解析之事务配置解析</title>
      <link>https://nicky-chin.cn/2020/05/03/spring-transaction-config/</link>
      <pubDate>Sun, 03 May 2020 11:18:15 +0800</pubDate>
      
      <guid>https://nicky-chin.cn/2020/05/03/spring-transaction-config/</guid>
      <description>1 事务配置 关于Spring的事务，大家每天都会遇见或者用到，为了更好的理解Transaction的原理机制，我们从源码角度来解析，本文的调试源码基于Spring-3.2.x版本进行调试。
1.1 配置 配置XML文件annotationTransactionNamespaceHandlerTests.xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:aop=&amp;quot;http://www.springframework.org/schema/aop&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xmlns:tx=&amp;quot;http://www.springframework.org/schema/tx&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd&amp;quot;&amp;gt; &amp;lt;tx:annotation-driven/&amp;gt; &amp;lt;bean id=&amp;quot;transactionManager&amp;quot; class=&amp;quot;org.springframework.tests.transaction.CallCountingTransactionManager&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;testBean&amp;quot; class=&amp;quot;org.springframework.transaction.annotation.AnnotationTransactionNamespaceHandlerTests$TransactionalTestBean&amp;quot;/&amp;gt; &amp;lt;context:mbean-export/&amp;gt;  TransactionalTestBean类
	@Service @ManagedResource(&amp;quot;test:type=TestBean&amp;quot;) public static class TransactionalTestBean { @Transactional(readOnly = true) public Collection&amp;lt;?&amp;gt; findAllFoos() { return null; } public void saveFoo() { } @Transactional(&amp;quot;qualifiedTransactionManager&amp;quot;) public void saveQualifiedFoo() { } @Transactional public void exceptional(Throwable t) throws Throwable { throw t; } @ManagedOperation public String doSomething() { return &amp;quot;done&amp;quot;; } @Transactional protected void annotationsOnProtectedAreIgnored() { } }  上面XML配置主要是开启事务驱动，然后配置事务管理器和带有@Transaction注解的Bean对象</description>
    </item>
    
  </channel>
</rss>